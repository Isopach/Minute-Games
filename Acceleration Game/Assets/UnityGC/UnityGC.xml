<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnityGC</name>
    </assembly>
    <members>
        <member name="T:GameCanvas.GameBase">
            <summary>
            内部に GameCanvas インスタンスを持つ MonoBehaviour
            </summary>
        </member>
        <member name="F:GameCanvas.GameBase.gc">
            <summary>
            GameCanvasへの参照
            </summary>
        </member>
        <member name="M:GameCanvas.GameBase.Start">
            <summary>
            初期化処理
            </summary>
        </member>
        <member name="M:GameCanvas.GameBase.Calc">
            <summary>
            更新処理
            </summary>
        </member>
        <member name="M:GameCanvas.GameBase.Draw">
            <summary>
            描画処理
            </summary>
        </member>
        <member name="T:GameCanvas.GameCanvas">
            <summary>
            GameCanvasの様々な機能を取りまとめたクラス
            </summary>
            <author>
            2010 kuro    (shift→sega)     ※Java版
            2010 fujieda (shift→ntt)      ※Java版
            2016 seibe   (shift→nintendo) ※Unity版
            </author>
        </member>
        <member name="M:GameCanvas.GameCanvas.Awake">
            <summary>
            構築処理
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.Update">
            <summary>
            更新処理
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetImageWidth(System.Int32)">
            <summary>
            指定された画像の横幅を返します。画像が見つからない場合 0 を返します
            </summary>
            <param name="id">描画する画像のID。img0.png ならば 0 を指定します</param>
            <returns>指定された画像の横幅</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetImageHeight(System.Int32)">
            <summary>
            指定された画像の高さを返します。画像が見つからない場合 0 を返します
            </summary>
            <param name="id">描画する画像のID。img0.png ならば 0 を指定します</param>
            <returns>指定された画像の高さ</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.SetColor(UnityEngine.Color)">
            <summary>
            DrawString や DrawRect などで用いる色を指定します
            </summary>
            <param name="color">塗りの色</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.SetColor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            DrawString や DrawRect などで用いる色を指定します
            </summary>
            <param name="red">赤成分 [0～1]</param>
            <param name="green">緑成分 [0～1]</param>
            <param name="blue">青成分 [0～1]</param>
            <param name="alpha">不透明度 [0～1]</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.SetColorHSV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            DrawString や DrawRect などで用いる色を、HSV色空間で指定します
            </summary>
            <param name="h">hue [0～1]</param>
            <param name="s">saturation [0～1]</param>
            <param name="v">calue [0～1]</param>
            <param name="alpha">不透明度 [0～1]</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.SetLineWidth(System.Single)">
            <summary>
            DrawRect や DrawCircle などに用いる線の太さを指定します
            </summary>
            <param name="lineWidth"></param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            線分を描画します
            </summary>
            <param name="startX">開始点のX座標</param>
            <param name="startY">開始点のY座標</param>
            <param name="endX">終了点のX座標</param>
            <param name="endY">終了点のY座標</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawCircle(System.Single,System.Single,System.Int32)">
            <summary>
            中抜きの円を描画します
            </summary>
            <param name="x">中心点のX座標</param>
            <param name="y">中心点のY座標</param>
            <param name="radius">半径</param>
            <param name="lineWidth">線の太さ</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            中抜きの長方形を描画します
            </summary>
            <param name="x">左上のX座標</param>
            <param name="y">左上のY座標</param>
            <param name="width">横幅</param>
            <param name="height">縦幅</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawRotatedRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            中抜きの回転させた長方形を描画します
            </summary>
            <param name="x">左上のX座標</param>
            <param name="y">左上のY座標</param>
            <param name="width">横幅</param>
            <param name="height">縦幅</param>
            <param name="angle">回転角度 (度数法)</param>
            <param name="rotationX">長方形の左上を原点としたときの回転の中心位置X</param>
            <param name="rotationY">長方形の左上を原点としたときの回転の中心位置Y</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawImage(System.Int32,System.Single,System.Single)">
            <summary>
            画像を描画します
            </summary>
            <param name="id">描画する画像のID。img0.png ならば 0 を指定します</param>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawClippedImage(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            一部分を切り取った画像を描画します
            </summary>
            <param name="id">描画する画像のID。img0.png ならば 0 を指定します</param>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="clipTop">画像上側の切り取る縦幅</param>
            <param name="clipRight">画像右側の切り取る横幅</param>
            <param name="clipBottom">画像下側の切り取る縦幅</param>
            <param name="clipLeft">画像左側の切り取る横幅</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawScaledImage(System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            大きさを変えた画像を描画します
            </summary>
            <param name="id">描画する画像のID。img0.png ならば 0 を指定します</param>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="scaleH">横の拡縮率</param>
            <param name="scaleV">縦の拡縮率</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawRotatedImage(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            回転させた画像を描画します
            </summary>
            <param name="id">描画する画像のID。img0.png ならば 0 を指定します</param>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="angle">回転角度 (度数法)</param>
            <param name="rotationX">画像左上を原点としたときの回転の中心位置X</param>
            <param name="rotationY">画像左上を原点としたときの回転の中心位置Y</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawImageSRT(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            画像を位置・拡縮率・回転角度を指定して描画します
            </summary>
            <param name="id">描画する画像のID。img0.png ならば 0 を指定します</param>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="scaleH">縦の拡縮率</param>
            <param name="scaleV">横の拡縮率</param>
            <param name="angle">回転角度 (度数法)</param>
            <param name="rotationX">画像左上を原点としたときの回転の中心位置X</param>
            <param name="rotationY">画像左上を原点としたときの回転の中心位置Y</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawClippedImageSRT(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            一部分を切り取った画像を、位置・拡縮率・回転角度を指定して描画します
            </summary>
            <param name="id">描画する画像のID。img0.png ならば 0 を指定します</param>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="clipTop">画像上側の切り取る縦幅</param>
            <param name="clipRight">画像右側の切り取る横幅</param>
            <param name="clipBottom">画像下側の切り取る縦幅</param>
            <param name="clipLeft">画像左側の切り取る横幅</param>
            <param name="scaleH">縦の拡縮率</param>
            <param name="scaleV">横の拡縮率</param>
            <param name="angle">回転角度 (度数法)</param>
            <param name="rotationX">画像左上を原点としたときの回転の中心位置X</param>
            <param name="rotationY">画像左上を原点としたときの回転の中心位置Y</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.FillCircle(System.Single,System.Single,System.Int32)">
            <summary>
            塗りつぶしの円を描画します
            </summary>
            <param name="x">中心点のX座標</param>
            <param name="y">中心点のY座標</param>
            <param name="radius">半径</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.FillRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            塗りつぶしの長方形を描画します
            </summary>
            <param name="x">左上のX座標</param>
            <param name="y">左上のY座標</param>
            <param name="width">横幅</param>
            <param name="height">縦幅</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.FillRotatedRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            塗りつぶしの回転させた長方形を描画します
            </summary>
            <param name="x">左上のX座標</param>
            <param name="y">左上のY座標</param>
            <param name="width">横幅</param>
            <param name="height">縦幅</param>
            <param name="angle">回転角度 (度数法)</param>
            <param name="rotationX">長方形の左上を原点としたときの回転の中心位置X</param>
            <param name="rotationY">長方形の左上を原点としたときの回転の中心位置Y</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.SetFontSize(System.Single)">
            <summary>
            文字描画におけるフォントサイズを設定します。10の倍数だと綺麗に表示されます
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.DrawString(System.Single,System.Single,System.String)">
            <summary>
            文字列を描画します
            </summary>
            <param name="x">X座標</param>
            <param name="y">Y座標</param>
            <param name="str">文字列 (最長128文字)</param>
        </member>
        <member name="P:GameCanvas.GameCanvas.frameRate">
            <summary>
            FPS（1秒あたりのフレーム更新回数）
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.screenWidth">
            <summary>
            画面X軸方向のゲーム解像度（幅）
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.screenHeight">
            <summary>
            画面Y軸方向のゲーム解像度（高さ）
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isFullScreen">
            <summary>
            フルスクリーンかどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isScreenAutoRotation">
            <summary>
            ゲーム画面が端末の向きに合わせて自動回転するかどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isPortrait">
            <summary>
            ゲーム画面が縦向きかどうか。この値はゲーム解像度によって自動的に決定されます
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.SetResolution(System.Int32,System.Int32)">
            <summary>
            ゲームの解像度を設定します
            </summary>
            <param name="width">X軸方向の解像度（幅）</param>
            <param name="height">Y軸方向の解像度（高さ）</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.ClearScreen">
            <summary>
            画面を白で塗りつぶします
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.PlayBGM(System.Int32,System.Boolean)">
            <summary>
            BGMを再生します。すでに再生しているBGMは停止します
            </summary>
            <param name="id">再生する音声のID。snd0.png ならば 0 を指定します</param>
            <param name="isLoop">ループするかどうか。真の場合、StopBGM()を呼ぶまでループ再生します</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.PauseBGM">
            <summary>
            BGMの再生を一時停止します。PlayBGM()で同じ音声を指定することで途中から再生できます
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.StopBGM">
            <summary>
            BGMの再生を終了します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.ChangeBGMVolume(System.Single)">
            <summary>
            BGMの音量を変更します
            </summary>
            <param name="volume">音量 (0～1)</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.PlaySE(System.Int32)">
            <summary>
            SEを再生します。すでに再生しているSEは停止しません
            </summary>
            <param name="id">再生する音声のID。snd0.png ならば 0 を指定します</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.ChangeSEVolume(System.Single)">
            <summary>
            SEの音量を変更します
            </summary>
            <param name="volume">音量 (0～1)</param>
        </member>
        <member name="P:GameCanvas.GameCanvas.isTouch">
            <summary>
            タッチされた状態かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isTouchBegan">
            <summary>
            タッチを始めた瞬間かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isTouchEnded">
            <summary>
            タッチを終えた瞬間かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isHold">
            <summary>
            ホールド（指で触れたまま静止）された状態かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isTap">
            <summary>
            タップ（指で軽く触れる）された瞬間かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isFlick">
            <summary>
            フリック（指で軽くはじく）された瞬間かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isPinchInOut">
            <summary>
            ピンチインまたはピンチアウトされた状態かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isPinchIn">
            <summary>
            ピンチインされた状態かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isPinchOut">
            <summary>
            ピンチアウトされた状態かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.touchX">
            <summary>
            タッチされている座標X。タッチされていないときは、最後にタッチされた座標を返します
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.touchY">
            <summary>
            タッチされている座標Y。タッチされていないときは、最後にタッチされた座標を返します
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.touchPoint">
            <summary>
            タッチされている座標。タッチされていないときは、最後にタッチされた座標を返します
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.touchCount">
            <summary>
            同時にタッチされている数
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.touchTimeLength">
            <summary>
            タッチされている時間
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.pinchRatio">
            <summary>
            ピンチインアウトの拡縮率。ピンチインアウトされていない場合、0を返します
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.pinchRatioInstant">
            <summary>
            前回フレームを基準としたピンチインアウトの拡縮率。ピンチインアウトされていない場合、0を返します
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.maxTapTimeLength">
            <summary>
            タップと判定する最長連続タッチ時間（秒）。0 より大きい値である必要があります
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.minFlickDistance">
            <summary>
            フリックと判定する最短移動距離。0 より大きい値である必要があります
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.maxTapDistance">
            <summary>
            タップと判定する最長移動距離。0 より大きい値である必要があります
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.minHoldTimeLength">
            <summary>
            ホールドと判定する最短タッチ時間（秒）。0 より大きい値である必要があります
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.maxPinchInScale">
            <summary>
            ピンチインと判定する最大縮小率。0 より大きく 1 より小さい値である必要があります
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.minPinchOutScale">
            <summary>
            ピンチアウトと判定する最小拡大率。1 より大きい値である必要があります
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetTouchPoint(System.Int32)">
            <summary>
            タッチの詳細情報。タッチされていないときは(-1, -1)を返します
            </summary>
            <param name="fingerId">fingerId</param>
        </member>
        <member name="P:GameCanvas.GameCanvas.acceX">
            <summary>
            加速度センサーで測定されたX軸の加速度
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.acceY">
            <summary>
            加速度センサーで測定されたY軸の加速度
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.acceZ">
            <summary>
            加速度センサーで測定されたZ軸の加速度
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isGyroEnabled">
            <summary>
            ジャイロスコープが有効かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.gyroX">
            <summary>
            ジャイロスコープで測定されたX軸の回転率
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.gyroY">
            <summary>
            ジャイロスコープで測定されたY軸の回転率
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.gyroZ">
            <summary>
            ジャイロスコープで測定されたZ軸の回転率
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isCompassEnabled">
            <summary>
            地磁気センサーが有効かどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.compass">
            <summary>
            地磁気センサーで測定された磁北極方向への回転角度 (度数法)
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isLocationEnabled">
            <summary>
            位置情報の取得が有効かどうか。有効でない場合、ユーザーに許可を求めるダイアログが表示される場合があります
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isRunningLocaltionService">
            <summary>
            位置情報の取得が正常に行われているかどうか
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.lastLocationLatitude">
            <summary>
            最後に測定した場所の緯度情報
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.lastLocationLongitude">
            <summary>
            最後に測定した場所の経度情報
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.lastLocationTime">
            <summary>
            最後に位置情報を取得した時間から現在までの経過秒数
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.StartLocationService">
            <summary>
            位置情報の測定を開始します。この操作は一般に多くの電力を消費します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.StopLocationService">
            <summary>
            位置情報の測定を終了します
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isBackKeyPushed">
            <summary>
            戻るボタンが押されたかどうか (Androidのみ)
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.isOpenWS">
            <summary>
            WebSocketがサーバーと接続状態にあるかどうか
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.OpenWS(System.String,UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction{System.String},UnityEngine.Events.UnityAction,UnityEngine.Events.UnityAction{System.String})">
            <summary>
            WebSocketサーバーに接続します
            </summary>
            <param name="url">WebSocketサーバーのURL</param>
            <param name="onOpen">WebSocketサーバーに接続したときに呼ばれる関数</param>
            <param name="onMessage">WebSocketサーバーからのメッセージを受け取る関数</param>
            <param name="onClose">WebSocketサーバーから切断したときに呼ばれる関数</param>
            <param name="onError">WebSocketサーバーとの接続でエラーが発生したときに呼ばれる関数</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.CloseWS">
            <summary>
            WebSocketサーバーから切断します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.SendWS(System.String)">
            <summary>
            WebSocketサーバーにメッセージを送信します
            </summary>
            <param name="message">メッセージ</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.SendWS(System.Object)">
            <summary>
            WebSocketサーバーにメッセージを送信します
            </summary>
            <param name="obj">メッセージオブジェクト</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.LoadAsInt(System.String)">
            <summary>
            セーブデータから整数値を取り出します。存在しなかった場合 0 を返します
            </summary>
            <param name="key">キー</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.LoadAsNumber(System.String)">
            <summary>
            セーブデータから数値を取り出します。存在しなかった場合 0 を返します
            </summary>
            <param name="key">キー</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.Load(System.String)">
            <summary>
            セーブデータから文字列を取り出します。存在しなかった場合 null を返します
            </summary>
            <param name="key">キー</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.SaveAsInt(System.String,System.Int32)">
            <summary>
            セーブデータに整数値を追加します
            </summary>
            <param name="key">キー</param>
            <param name="value">保存する整数値</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.SaveAsNumber(System.String,System.Single)">
            <summary>
            セーブデータに数値を追加します
            </summary>
            <param name="key">キー</param>
            <param name="value">保存する数値</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.Save(System.String,System.String)">
            <summary>
            セーブデータに文字列を追加します
            </summary>
            <param name="key">キー</param>
            <param name="value">保存する文字列</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DeleteData(System.String)">
            <summary>
            セーブデータから指定されたキーのデータを削除します
            </summary>
            <param name="key">キー</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.DeleteDataAll">
            <summary>
            セーブデータを空にします
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.ReadDataByStorage">
            <summary>
            ストレージからセーブデータを読み取ります。この関数はゲーム起動時に自動で実行されます
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.WriteDataToStorage">
            <summary>
            ストレージにセーブデータを書き込みます
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.ConvertToJson(System.Object)">
            <summary>
            オブジェクトをJSON形式の文字列に変換します
            </summary>
            <param name="obj">オブジェクト</param>
            <returns>JSON形式の文字列</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.ConvertFromJson``1(System.String)">
            <summary>
            JSON形式の文字列からオブジェクトを復元します
            </summary>
            <typeparam name="T">復元するオブジェクトの型</typeparam>
            <param name="json">JSON形式の文字列</param>
            <returns>復元されたオブジェクト</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.CheckHitRect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            2つの矩形が衝突しているかどうかを調べます
            </summary>
            <param name="x1">矩形1のX座標</param>
            <param name="y1">矩形1のY座標</param>
            <param name="w1">矩形1の横幅</param>
            <param name="h1">矩形1の縦幅</param>
            <param name="x2">矩形2のX座標</param>
            <param name="y2">矩形2のY座標</param>
            <param name="w2">矩形2の横幅</param>
            <param name="h2">矩形2の縦幅</param>
            <returns>衝突しているかどうか</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.CheckHitCircle(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            2つの円が衝突しているかどうかを調べます
            </summary>
            <param name="x1">円1のX座標</param>
            <param name="y1">円1のY座標</param>
            <param name="r1">円1の半径</param>
            <param name="x2">円2のX座標</param>
            <param name="y2">円2のY座標</param>
            <param name="r2">円2の半径</param>
            <returns>衝突しているかどうか</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.CheckHitImage(System.Int32,System.Single,System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            2つの画像が衝突しているかどうかを調べます
            </summary>
            <param name="img1">画像1のID</param>
            <param name="x1">画像1のX座標</param>
            <param name="y1">画像1のY座標</param>
            <param name="img2">画像2のID</param>
            <param name="x2">画像2のX座標</param>
            <param name="y2">画像2のY座標</param>
            <returns>衝突しているかどうか</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.Cos(System.Single)">
            <summary>
            cosを求めます
            </summary>
            <param name="angle">角度（度数法）</param>
            <returns>計算結果</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.Sin(System.Single)">
            <summary>
            sinを求めます
            </summary>
            <param name="angle">角度（度数法）</param>
            <returns>計算結果</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.Atan2(System.Single,System.Single)">
            <summary>
            atan2 あるいは ベクトルの角度を求めます
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <returns>角度（度数法）</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.Deg2Rad(System.Single)">
            <summary>
            角度を度数法から弧度法に変換します
            </summary>
            <param name="degree">角度（度数法）</param>
            <returns>角度（弧度法）</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.Rad2Deg(System.Single)">
            <summary>
            角度を弧度法から度数法に変換します
            </summary>
            <param name="radian">角度（弧度法）</param>
            <returns>角度（度数法）</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.Random(System.Int32,System.Int32)">
            <summary>
            min 以上 max 以下のランダムな整数値を返します
            </summary>
            <param name="min">最小の数</param>
            <param name="max">最大の数</param>
            <returns></returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.Random">
            <summary>
            0 以上 1 以下のランダムな数値を返します
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.Random(System.Single,System.Single)">
            <summary>
            min 以上 max 以下のランダムな数値を返します
            </summary>
            <param name="min">最小の数</param>
            <param name="max">最大の数</param>
            <returns></returns>
        </member>
        <member name="P:GameCanvas.GameCanvas.time">
            <summary>
            ゲームが起動してから現在のフレームまでの経過秒数
            </summary>
        </member>
        <member name="P:GameCanvas.GameCanvas.deltaTime">
            <summary>
            前回のフレームから現在のフレームまでの経過秒数
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetYear">
            <summary>
            今日が西暦何年かを 0～9999 の数値で返します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetMonth">
            <summary>
            今日が何月かを 1～12 の数値で返します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetDay">
            <summary>
            今日の日付を 1～31 の数値で返します
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetDayOfWeek">
            <summary>
            今日の曜日を 0～6 の数値で返します。0が日曜日、6が土曜日です
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetDayOfWeekKanji">
            <summary>
            今日の曜日を 月火水木金土日 の漢字で返します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetHour">
            <summary>
            いま何時かを 0～23 の数値で返します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetMinute">
            <summary>
            いま何分かを 0～59 の数値で返します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetSecond">
            <summary>
            いま何秒かを 0～59 の数値で返します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetMilliSecond">
            <summary>
            いま何ミリ秒かを 0～999 で返します
            </summary>
            <returns></returns>
        </member>
        <member name="P:GameCanvas.GameCanvas.isDevelop">
            <summary>
            デバッグ環境あるいはデバッグビルドで実行されている場合に真を返します
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.Trace(System.String)">
            <summary>
            コンソールにログメッセージを出力します。この関数は isDevelop が真の時のみ動作します
            </summary>
            <param name="message">ログメッセージ</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.Trace(UnityEngine.Vector2)">
            <summary>
            コンソールにベクトル値を出力します。この関数は isDevelop が真の時のみ動作します
            </summary>
            <param name="value">ベクトル値</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.Trace(System.IComparable)">
            <summary>
            コンソールに数値を出力します。この関数は isDevelop が真の時のみ動作します
            </summary>
            <param name="value">数値</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.Trace(System.Boolean)">
            <summary>
            コンソールに真偽値を出力します。この関数は isDevelop が真の時のみ動作します
            </summary>
            <param name="value">真偽値</param>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetIsKeyPress(System.String)">
            <summary>
            指定したキーが押されているかどうか。この関数は isDevelop が真の時のみ動作します
            </summary>
            <param name="key">調べたいキー</param>
            <returns>押されているかどうか</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetIsKeyPushed(System.String)">
            <summary>
            指定したキーが押された瞬間かどうか。この関数は isDevelop が真の時のみ動作します
            </summary>
            <param name="key">調べたいキー</param>
            <returns>押された瞬間かどうか</returns>
        </member>
        <member name="M:GameCanvas.GameCanvas.GetIsKeyReleased(System.String)">
            <summary>
            指定したキーが離された瞬間かどうか。この関数は isDevelop が真の時のみ動作します
            </summary>
            <param name="key">調べたいキー</param>
            <returns>離された瞬間かどうか</returns>
        </member>
        <member name="P:GameCanvas.GameCanvas.isLoaded">
            <summary>
            画像・音声の読み込みが終わっているかどうか
            </summary>
        </member>
        <member name="M:GameCanvas.GameCanvas.SetOnStart(UnityEngine.Events.UnityAction)">
            <summary>
            GameCanvasが画像・音声の読み込みを終えたときに呼び出されるコールバック関数を登録します
            </summary>
            <param name="onStart"></param>
        </member>
        <member name="M:GameCanvas.GameCanvas.ExitApp">
            <summary>
            アプリケーションを終了します
            </summary>
        </member>
        <member name="T:GameCanvas.SerializableDictionary`2">
            <summary>
            永続化可能な連想配列（ディレクショナリー）
            </summary>
            <typeparam name="TKey">キーの型</typeparam>
            <typeparam name="TValue">値の型</typeparam>
        </member>
        <member name="P:GameCanvas.SerializableDictionary`2.Count">
            <summary>
            格納されているデータの数
            </summary>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.#ctor">
            <summary>
            コンストラクタ
            </summary>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            コンストラクタ。既存のDictionaryインスタンスを元にデータを初期化します
            </summary>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.ToDictionary">
            <summary>
            Dictionary型に変換します
            </summary>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.ToJson">
            <summary>
            Json記法で永続化します
            </summary>
            <returns></returns>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.FromDictionary(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            既存のDictionaryインスタンスで自身を上書きします
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.FromJson(System.String)">
            <summary>
            Json記法の文字列からインスタンスを復元します
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.Add(`0,`1,System.Boolean)">
            <summary>
            データを追加します
            </summary>
            <param name="key">キー</param>
            <param name="value">値</param>
            <param name="overwrite">上書きを許すかどうか</param>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.Clear">
            <summary>
            データを初期化します
            </summary>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.Remove(`0)">
            <summary>
            キーで検索し該当するデータを削除します
            </summary>
            <param name="key">キー</param>
        </member>
        <member name="M:GameCanvas.SerializableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            キーで検索し該当するデータを返します
            </summary>
            <param name="key">キー</param>
            <param name="value">値（存在した場合）</param>
            <returns>キーが存在したかどうか</returns>
        </member>
        <member name="T:GameCanvas.SingletonMonoBehaviour`1">
            <summary>
            シングルトン版MonoBehaviour
            </summary>
            <typeparam name="T">シングルトンにしたい型</typeparam>
        </member>
    </members>
</doc>
